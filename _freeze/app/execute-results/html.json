{
  "hash": "1aac01547fbd112a4e9517d07404014f",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Conference Program\"\nruntime: shiny\nexecute:\n  echo: false\n  warning: false\n  message: false\n---\n\n\n::: {.cell}\n\n:::\n\n\n# UI\nui <- fluidPage(\n  theme = bs_theme(bootswatch = \"flatly\"),\n  titlePanel(\"ðŸ“… Conference Program\"),\n  sidebarLayout(\n    sidebarPanel(\n      selectInput(\"day\", \"Filter by Day:\", choices = unique(program$day), selected = unique(program$day)[1]),\n      sliderInput(\"time\", \"Filter by Time:\",\n                  min = min(program$start_dt),\n                  max = max(program$end_dt),\n                  value = c(min(program$start_dt), max(program$end_dt)),\n                  timeFormat = \"%H:%M\"),\n      selectInput(\"track\", \"Filter by Track:\", choices = c(\"All\", unique(program$track)), selected = \"All\"),\n      selectInput(\"session\", \"Filter by Session:\", choices = c(\"All\", unique(program$session)), selected = \"All\"),\n      textInput(\"search\", \"Search:\", placeholder = \"Title, Author, Keywords...\"),\n      width = 3\n    ),\n    mainPanel(\n      DTOutput(\"prog_table\"),\n      br(),\n      downloadButton(\"download_ics\", \"Add to Calendar\"),\n      width = 9\n    )\n  )\n)\n\n# Server\nserver <- function(input, output, session) {\n  filtered <- reactive({\n    df <- program %>%\n      filter(day == input$day,\n             start_dt >= input$time[1],\n             end_dt <= input$time[2])\n    if (input$track != \"All\")   df <- filter(df, track == input$track)\n    if (input$session != \"All\") df <- filter(df, session == input$session)\n    if (nzchar(input$search))    df <- df %>% filter(grepl(input$search, paste(title, author, abstract), ignore.case = TRUE))\n    df\n  })\n\n  output$prog_table <- renderDT({\n    dat <- filtered() %>%\n      select(day, start, end, track, session, title, author)\n    datatable(dat, selection = 'single', rownames = FALSE, options = list(pageLength = 10))\n  })\n\n  # Show abstract modal for Keynotes or Sessions\n  observeEvent(input$prog_table_rows_selected, {\n    sel <- input$prog_table_rows_selected\n    if (length(sel)) {\n      row <- filtered()[sel, ]\n      if (grepl(\"Keynote|Session\", row$session, ignore.case = TRUE)) {\n        showModal(modalDialog(\n          title = paste(row$session, \"-\", row$title),\n          HTML(paste0(\"<strong>Author:</strong> \", row$author, \"<br><br>\", row$abstract)),\n          easyClose = TRUE,\n          footer = NULL\n        ))\n      }\n    }\n  })\n\n  # Generate ICS file for selected talk\n  output$download_ics <- downloadHandler(\n    filename = function() {\n      sel <- input$prog_table_rows_selected\n      if (length(sel)) paste0(filtered()[sel, ]$id, \".ics\") else \"program.ics\"\n    },\n    content = function(file) {\n      sel <- input$prog_table_rows_selected\n      if (!length(sel)) return()\n      row <- filtered()[sel, ]\n      ics <- c(\n        \"BEGIN:VCALENDAR\",\n        \"VERSION:2.0\",\n        \"PRODID:-//Conference Program//EN\",\n        \"BEGIN:VEVENT\",\n        paste0(\"UID:\", row$id),\n        paste0(\"DTSTAMP:\", format(Sys.time(), \"%Y%m%dT%H%M%SZ\")),\n        paste0(\"DTSTART:\", format(row$start_dt, \"%Y%m%dT%H%M%SZ\")),\n        paste0(\"DTEND:\", format(row$end_dt, \"%Y%m%dT%H%M%SZ\")),\n        paste0(\"SUMMARY:\", row$title),\n        paste0(\"DESCRIPTION:\", gsub(\"\\n\", \"\\\\n\", row$abstract)),\n        paste0(\"LOCATION:\", row$building, \" \", row$room),\n        \"END:VEVENT\",\n        \"END:VCALENDAR\"\n      )\n      writeLines(ics, file)\n    }\n  )\n}\n\nshinyApp(ui, server)\n``\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}